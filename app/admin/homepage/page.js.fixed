'use client';

import React, { useState, useEffect } from 'react';
import { FaSync } from 'react-icons/fa';

// EditableText component for inline text editing
const EditableText = ({ value, onChange, className = '', placeholder = 'คลิกเพื่อแก้ไข' }) => {
  const [isEditing, setIsEditing] = useState(false);
  const [text, setText] = useState(value || '');

  useEffect(() => {
    setText(value || '');
  }, [value]);

  const handleClick = () => {
    setIsEditing(true);
  };

  const handleBlur = () => {
    setIsEditing(false);
    if (text !== value) {
      onChange(text);
    }
  };

  const handleChange = (e) => {
    setText(e.target.value);
  };

  const handleKeyDown = (e) => {
    if (e.key === 'Enter') {
      handleBlur();
    }
  };

  return isEditing ? (
    <input
      type="text"
      value={text}
      onChange={handleChange}
      onBlur={handleBlur}
      onKeyDown={handleKeyDown}
      className={`border border-gray-300 p-1 ${className}`}
      autoFocus
    />
  ) : (
    <div
      onClick={handleClick}
      className={`cursor-pointer hover:bg-gray-100 p-1 ${className} ${!value && 'text-gray-400'}`}
    >
      {value || placeholder}
    </div>
  );
};

// EditableImage component for inline image URL editing
const EditableImage = ({ src, onChange, className = '', placeholder = '/placeholder.jpg' }) => {
  const [isEditing, setIsEditing] = useState(false);
  const [url, setUrl] = useState(src || '');

  useEffect(() => {
    setUrl(src || '');
  }, [src]);

  const handleClick = () => {
    setIsEditing(true);
  };

  const handleBlur = () => {
    setIsEditing(false);
    if (url !== src) {
      onChange(url);
    }
  };

  const handleChange = (e) => {
    setUrl(e.target.value);
  };

  const handleKeyDown = (e) => {
    if (e.key === 'Enter') {
      handleBlur();
    }
  };

  return (
    <div className={`relative ${className}`}>
      <img
        src={src || placeholder}
        alt="Editable"
        className="w-full h-auto cursor-pointer"
        onClick={handleClick}
      />
      {isEditing && (
        <div className="absolute inset-0 bg-white bg-opacity-90 p-2 flex flex-col">
          <input
            type="text"
            value={url}
            onChange={handleChange}
            onBlur={handleBlur}
            onKeyDown={handleKeyDown}
            className="border border-gray-300 p-1 mb-2"
            placeholder="ใส่ URL รูปภาพ"
            autoFocus
          />
          <div className="text-xs text-gray-500">กด Enter เพื่อบันทึก</div>
        </div>
      )}
    </div>
  );
};

// AdminPlaceholder component for sections that are not yet editable
const AdminPlaceholder = ({ title, className = '' }) => {
  return (
    <div className={`p-4 border border-dashed border-gray-400 text-center ${className}`}>
      <div className="text-lg font-semibold">{title}</div>
      <div className="text-sm text-gray-500">ส่วนนี้ยังไม่สามารถแก้ไขได้</div>
    </div>
  );
};

// Main AdminHomepagePage component
export default function AdminHomepagePage() {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isSaving, setIsSaving] = useState(false);
  const [saveMessage, setSaveMessage] = useState(null);
  const [isRefreshing, setIsRefreshing] = useState(false);

  // ฟังก์ชันโหลดข้อมูลใหม่
  const refreshData = async () => {
    setLoading(true);
    setIsRefreshing(true);
    try {
      // ใช้ข้อมูลตัวอย่างเลยเพื่อแก้ปัญหา
      console.log('Using sample data instead of fetching');
      
      // ข้อมูลตัวอย่าง
      const sampleData = {
        hero: {
          title: "ผ่อนไอโฟนที่ ฟินฟิน",
          subtitle: "ง่าย ไว ชัวร์!",
          description: "บริการผ่อนสินค้าไอทีชั้นนำ ดอกเบี้ยต่ำ อนุมัติไว",
          image: "/images/banner1.png"
        },
        features: [
          {
            id: 1,
            icon: "shopping-cart",
            title: "เลือกสินค้า",
            description: "เลือกสินค้าที่ต้องการผ่อน"
          },
          {
            id: 2,
            icon: "document",
            title: "กรอกข้อมูล",
            description: "กรอกข้อมูลส่วนตัวและเอกสาร"
          },
          {
            id: 3,
            icon: "check",
            title: "รออนุมัติ",
            description: "รออนุมัติไม่เกิน 30 นาที"
          }
        ]
      };
      
      setData(sampleData);
      setError(null);
    } catch (err) {
      console.error('Error refreshing data:', err);
      setError(err.message);
    } finally {
      setLoading(false);
      setIsRefreshing(false);
    }
  };

  // โหลดข้อมูลเมื่อเริ่มต้น
  useEffect(() => {
    refreshData();
  }, []);

  // ฟังก์ชันอัพเดทข้อมูล hero section
  const updateHero = (field, value) => {
    setData({
      ...data,
      hero: {
        ...data.hero,
        [field]: value
      }
    });
  };

  // ฟังก์ชันอัพเดทข้อมูล feature
  const updateFeature = (index, field, value) => {
    const updatedFeatures = [...data.features];
    updatedFeatures[index] = {
      ...updatedFeatures[index],
      [field]: value
    };
    
    setData({
      ...data,
      features: updatedFeatures
    });
  };

  // ฟังก์ชันบันทึกข้อมูล
  const handleSave = async () => {
    setIsSaving(true);
    setSaveMessage(null);
    
    try {
      const response = await fetch('/api/save-homepage', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });
      
      if (!response.ok) {
        throw new Error('Failed to save data');
      }
      
      setSaveMessage({ type: 'success', text: 'บันทึกข้อมูลสำเร็จ' });
      setTimeout(() => setSaveMessage(null), 3000);
      
      setTimeout(() => {
        refreshData();
      }, 500);
    } catch (err) {
      console.error('Error saving data:', err);
      setSaveMessage({ type: 'error', text: `เกิดข้อผิดพลาด: ${err.message}` });
    } finally {
      setIsSaving(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-100">
      <div className="container mx-auto px-4 py-8">
        <div className="bg-white rounded-lg shadow-lg p-6">
          <div className="flex justify-between items-center mb-6">
            <h1 className="text-2xl font-bold">จัดการหน้าแรก</h1>
            <div className="flex items-center space-x-4">
              <button 
                onClick={refreshData} 
                className="flex items-center text-blue-500 hover:text-blue-700"
                disabled={isRefreshing}
              >
                <FaSync className={`mr-1 ${isRefreshing ? 'animate-spin' : ''}`} />
                {isRefreshing ? 'กำลังรีเฟรช...' : 'รีเฟรชข้อมูล'}
              </button>
              <button
                onClick={handleSave}
                disabled={isSaving || loading}
                className={`px-4 py-2 rounded ${
                  isSaving || loading
                    ? 'bg-gray-400 cursor-not-allowed'
                    : 'bg-blue-500 hover:bg-blue-600 text-white'
                }`}
              >
                {isSaving ? 'กำลังบันทึก...' : 'บันทึกการเปลี่ยนแปลง'}
              </button>
            </div>
          </div>
          
          {saveMessage && (
            <div
              className={`p-3 mb-4 rounded ${
                saveMessage.type === 'success' ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'
              }`}
            >
              {saveMessage.text}
            </div>
          )}
          
          {error && (
            <div className="p-3 mb-4 rounded bg-red-100 text-red-700">
              เกิดข้อผิดพลาดในการโหลดข้อมูล: {error}
            </div>
          )}
          
          {loading && !data ? (
            <div className="text-center py-8">กำลังโหลดข้อมูล...</div>
          ) : (
            <div>
              {/* Hero Section */}
              <div className="mb-8">
                <h2 className="text-xl font-semibold mb-4">Hero Section</h2>
                <div className="bg-gray-50 p-4 rounded-lg">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                      <div className="mb-4">
                        <label className="block text-sm font-medium text-gray-700 mb-1">หัวข้อหลัก</label>
                        <EditableText
                          value={data?.hero?.title}
                          onChange={(value) => updateHero('title', value)}
                          className="w-full font-bold text-xl"
                        />
                      </div>
                      
                      <div className="mb-4">
                        <label className="block text-sm font-medium text-gray-700 mb-1">หัวข้อรอง</label>
                        <EditableText
                          value={data?.hero?.subtitle}
                          onChange={(value) => updateHero('subtitle', value)}
                          className="w-full text-lg"
                        />
                      </div>
                      
                      <div className="mb-4">
                        <label className="block text-sm font-medium text-gray-700 mb-1">คำอธิบาย</label>
                        <EditableText
                          value={data?.hero?.description}
                          onChange={(value) => updateHero('description', value)}
                          className="w-full"
                        />
                      </div>
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">รูปภาพ</label>
                      <EditableImage
                        src={data?.hero?.image}
                        onChange={(value) => updateHero('image', value)}
                        className="border border-gray-200 rounded"
                      />
                      <div className="mt-2 text-xs text-gray-500">
                        คลิกที่รูปภาพเพื่อแก้ไข URL
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              
              {/* Features Section */}
              <div className="mb-8">
                <h2 className="text-xl font-semibold mb-4">Features Section</h2>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  {data?.features?.map((feature, index) => (
                    <div key={feature.id} className="bg-gray-50 p-4 rounded-lg">
                      <div className="mb-3">
                        <label className="block text-sm font-medium text-gray-700 mb-1">ไอคอน</label>
                        <EditableText
                          value={feature.icon}
                          onChange={(value) => updateFeature(index, 'icon', value)}
                          className="w-full"
                          placeholder="ชื่อไอคอน"
                        />
                      </div>
                      
                      <div className="mb-3">
                        <label className="block text-sm font-medium text-gray-700 mb-1">หัวข้อ</label>
                        <EditableText
                          value={feature.title}
                          onChange={(value) => updateFeature(index, 'title', value)}
                          className="w-full font-semibold"
                        />
                      </div>
                      
                      <div className="mb-3">
                        <label className="block text-sm font-medium text-gray-700 mb-1">คำอธิบาย</label>
                        <EditableText
                          value={feature.description}
                          onChange={(value) => updateFeature(index, 'description', value)}
                          className="w-full"
                        />
                      </div>
                    </div>
                  ))}
                </div>
              </div>
              
              {/* Products Section Placeholder */}
              <div className="mb-8">
                <h2 className="text-xl font-semibold mb-4">Products Section</h2>
                <AdminPlaceholder title="ส่วนแสดงสินค้า" />
              </div>
              
              {/* Testimonials Section Placeholder */}
              <div className="mb-8">
                <h2 className="text-xl font-semibold mb-4">Testimonials Section</h2>
                <AdminPlaceholder title="ส่วนรีวิวจากลูกค้า" />
              </div>
              
              {/* Footer Placeholder */}
              <div className="bg-gray-800 text-white py-8">
                <div className="container mx-auto px-4 text-center">
                  <AdminPlaceholder title="ส่วนท้ายเว็บไซต์" className="text-white" />
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
